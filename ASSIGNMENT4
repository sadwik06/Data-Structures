//Q1 - In the user input linked list, find the smallest int data node and swap it with first node similarly swap the largest data node with end node.

#include <stdio.h>
#include <stdlib.h>

void swap(int *a, int *b){
    int temp = *a;
    *a = *b;
    *b = temp;
}

struct node{
    int data;
    struct node *next;
};

int main(){
    int size;
    printf("Enter the number of node : ");
    scanf("%d", &size);

    struct node *head = NULL, *temp;

    for(int i = 1; i <= size; i++){
        struct node *nnode = (struct node *) malloc (sizeof(struct node));

        if(nnode == NULL){
            printf("Memory allocation failed!");
            return 1;
        }

        printf("Enter data : ");
        scanf("%d", &nnode->data);
        nnode->next = NULL;

        if (head == NULL){
            head = nnode;
            temp = nnode;
        } else {
            temp->next = nnode;
            temp = nnode;
        }
    }
    struct node *end = temp;

    temp = head;
    int min = temp->data, max = temp->data;
    while(temp != NULL){
        if(temp->data < min){
            min = temp->data;
        }
        if(temp->data > max){
            max = temp->data;
        }
        temp = temp->next;
    }

    temp = head;
    while(temp->data != min){
        temp = temp->next;
    }

    swap(&head->data, &temp->data);

    temp = head;
    while(temp->data != max){
        temp = temp->next;
    }

    swap(&end->data, &temp->data);

    printf("linked list : ");
    temp = head;
    while(temp != NULL){
        printf("%d\t", temp->data);
        temp = temp->next;
    }
}

//Q2 - In the user input linked list, make two new linked list one having even data and one odd data.

#include <stdio.h>
#include <stdlib.h>

struct node{
    int data;
    struct node *next;
};

int main(){
    int size;
    printf("Enter the number of node : ");
    scanf("%d", &size);

    struct node *head = NULL, *temp;

    for(int i = 1; i <= size; i++){
        struct node *nnode = (struct node *) malloc (sizeof(struct node));

        if(nnode == NULL){
            printf("Memory allocation failed!");
            return 1;
        }

        printf("Enter data : ");
        scanf("%d", &nnode->data);
        nnode->next = NULL;

        if (head == NULL){
            head = nnode;
            temp = nnode;
        } else {
            temp->next = nnode;
            temp = nnode;
        }
    }

    struct node *even_head = NULL, *even_temp, *odd_head = NULL, *odd_temp;

    temp = head;

    while(temp != NULL){
        if(temp->data % 2 == 0){
            struct node *even_nnode = (struct node *) malloc (sizeof(struct node));

            even_nnode->data = temp->data;
            even_nnode->next = NULL;
            
            if(even_head == NULL){
                even_head = even_nnode;
                even_temp = even_nnode;
            } else {
                even_temp->next = even_nnode;
                even_temp = even_nnode;
            }
        } else {
            struct node *odd_nnode = (struct node *) malloc (sizeof(struct node));

            odd_nnode->data = temp->data;
            odd_nnode->next = NULL;

            if(odd_head == NULL){
                odd_head = odd_nnode;
                odd_temp = odd_nnode;
            } else {
                odd_temp->next = odd_nnode;
                odd_temp = odd_nnode;
            }
        }
        temp = temp->next;
    }

    printf("\nEntered linked list :\n");
    temp = head;
    while(temp != NULL){
        printf("%d\n", temp->data);
        temp = temp->next;
    }

    printf("\nNew even linked list :\n");
    even_temp = even_head;
    while(even_temp != NULL){
        printf("%d\n", even_temp->data);
        even_temp = even_temp->next;
    }

    printf("\nNew odd linked list :\n");
    odd_temp = odd_head;
    while(odd_temp != NULL){
        printf("%d\n", odd_temp->data);
        odd_temp = odd_temp->next;
    }
}

//Q3 - Find length of user input linked list.

#include <stdio.h>
#include <stdlib.h>

struct node{
    int data;
    struct node *next;
};

int main(){
    int size;
    printf("Enter the number of node : ");
    scanf("%d", &size);

    struct node *head = NULL, *temp;

    for(int i = 1; i <= size; i++){
        struct node *nnode = (struct node *) malloc (sizeof(struct node));

        if(nnode == NULL){
            printf("Memory allocation failed!");
            return 1;
        }

        printf("Enter data : ");
        scanf("%d", &nnode->data);
        nnode->next = NULL;

        if (head == NULL){
            head = nnode;
            temp = nnode;
        } else {
            temp->next = nnode;
            temp = nnode;
        }
    }

    int length = 0;

    temp = head;
    while(temp != NULL){
        length++;
        temp = temp->next;
    }

    printf("\nEntered linked list :\n");
    temp = head;
    while(temp != NULL){
        printf("%d\n", temp->data);
        temp = temp->next;
    }
    printf("\n Length of linked list is %d.", length);
}

//Q4 - Find the third node from last (nodes >= 10).

#include <stdio.h>
#include <stdlib.h>

struct node{
    int data;
    struct node *next;
};

int main(){
    int size;
    printf("Enter the number of node : ");
    scanf("%d", &size);

    struct node *head = NULL, *temp;

    for(int i = 1; i <= size; i++){
        struct node *nnode = (struct node *) malloc (sizeof(struct node));

        if(nnode == NULL){
            printf("Memory allocation failed!");
            return 1;
        }

        printf("Enter data : ");
        scanf("%d", &nnode->data);
        nnode->next = NULL;

        if (head == NULL){
            head = nnode;
            temp = nnode;
        } else {
            temp->next = nnode;
            temp = nnode;
        }
    }

    temp = head;

    for(int i = 1; i <= size - 3; i++){
        temp = temp->next;
    }

    printf("Data of third node from last node is %d.", temp->data);
}

//Q5 - Function to swap two adjacent node.

#include <stdio.h>
#include <stdlib.h>

struct node{
    int data;
    struct node *next;
};

int main(){
    int size;
    printf("Enter the number of node : ");
    scanf("%d", &size);

    struct node *head = NULL, *temp;

    for(int i = 1; i <= size; i++){
        struct node *nnode = (struct node *) malloc (sizeof(struct node));

        if(nnode == NULL){
            printf("Memory allocation failed!");
            return 1;
        }

        printf("Enter data : ");
        scanf("%d", &nnode->data);
        nnode->next = NULL;

        if (head == NULL){
            head = nnode;
            temp = nnode;
        } else {
            temp->next = nnode;
            temp = nnode;
        }
    }

    int pos;
    printf("Enter the number of node to which it's and it's next adjacent node's data to be swap : ");
    scanf("%d", &pos);

    temp = head;
    for(int i = 1; i < pos; i++){
        temp = temp->next;
    }

    int swapper = temp->data;
    temp->data = temp->next->data;
    temp->next->data = swapper;

    printf("\nlinked list :\n");
    temp = head;
    while(temp != NULL){
        printf("%d\n", temp->data);
        temp = temp->next;
    }
}

//Q6 - Implement bubble sort in singly linked list.

#include <stdio.h>
#include <stdlib.h>

struct node{
    int data;
    struct node *next;
};

int main(){
    int size;
    printf("Enter the number of node : ");
    scanf("%d", &size);

    struct node *head = NULL, *temp;

    for(int i = 1; i <= size; i++){
        struct node *nnode = (struct node *) malloc (sizeof(struct node));

        if(nnode == NULL){
            printf("Memory allocation failed!");
            return 1;
        }

        printf("Enter data : ");
        scanf("%d", &nnode->data);
        nnode->next = NULL;

        if (head == NULL){
            head = nnode;
            temp = nnode;
        } else {
            temp->next = nnode;
            temp = nnode;
        }
    }
    
    for(int i = 0; i < (size - 1); i++){
        struct node *temp1 = head, *temp2 = head->next;
        for(int j = 0; j < (size - i - 1); j++){
            if(temp1->data > temp2->data){
                int dataTemp = temp1->data;
                temp1->data = temp2->data;
                temp2->data = dataTemp;
            }
            temp1 = temp1->next;
            temp2 = temp2->next;
        }
    }

    printf("\nSorted linked list :\n");
    temp = head;
    while(temp != NULL){
        printf("%d\n", temp->data);
        temp = temp->next;
    }
}

//Q7 - Take two linked list from user, merge them in sorted way.

#include <stdio.h>
#include <stdlib.h>

struct node{
    int data;
    struct node *next;
};

int main(){
    int size1;
    printf("Enter the number of node in 1st linked list : ");
    scanf("%d", &size1);

    struct node *head1 = NULL, *temp1;

    for(int i = 1; i <= size1; i++){
        struct node *nnode = (struct node *) malloc (sizeof(struct node));

        if(nnode == NULL){
            printf("Memory allocation failed!");
            return 1;
        }

        printf("Enter data : ");
        scanf("%d", &nnode->data);
        nnode->next = NULL;

        if (head1 == NULL){
            head1 = nnode;
            temp1 = nnode;
        } else {
            temp1->next = nnode;
            temp1 = nnode;
        }
    }

    int size2;
    printf("Enter the number of node in 2nd linked list : ");
    scanf("%d", &size2);

    struct node *head2 = NULL, *temp2;

    for(int i = 1; i <= size2; i++){
        struct node *nnode = (struct node *) malloc (sizeof(struct node));

        if(nnode == NULL){
            printf("Memory allocation failed!");
            return 1;
        }

        printf("Enter data : ");
        scanf("%d", &nnode->data);
        nnode->next = NULL;

        if (head2 == NULL){
            head2 = nnode;
            temp2 = nnode;
        } else {
            temp2->next = nnode;
            temp2 = nnode;
        }
    }

    temp1 = head1;
    temp2 = head2;

    while(temp1->next != NULL){
        temp1 = temp1->next;
    }

    temp1->next = temp2;

    struct node *head = head1;

    int size = size1 + size2;

    for(int i = 0; i < (size - 1); i++){
        temp1 = head, temp2 = head->next;
        for(int j = 0; j < (size - i - 1); j++){
            if(temp1->data > temp2->data){
                int dataTemp = temp1->data;
                temp1->data = temp2->data;
                temp2->data = dataTemp;
            }
            temp1 = temp1->next;
            temp2 = temp2->next;
        }
    }
    temp1 = head;

    while(temp1 != NULL){
        printf("%d ", temp1->data);
        temp1 = temp1->next;
    }
}
